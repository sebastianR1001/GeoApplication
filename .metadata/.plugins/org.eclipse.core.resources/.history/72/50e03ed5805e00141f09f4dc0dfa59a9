package geo.geoapplication;

import geo.geoapplication.util.SystemUiHider;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.SystemClock;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;



/**
 * An example full-screen activity that shows and hides the system UI (i.e.
 * status bar and navigation/system bar) with user interaction.
 *
 * @see SystemUiHider
 */
public class FullscreenActivity extends Activity {
    /**
     * Whether or not the system UI should be auto-hidden after
     * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
     */
    private static final boolean AUTO_HIDE = true;

    /**
     * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
     * user interaction before hiding the system UI.
     */
    private static final int AUTO_HIDE_DELAY_MILLIS = 3000;

    /**
     * If set, will toggle the system UI visibility upon interaction. Otherwise,
     * will show the system UI visibility upon interaction.
     */
    private static final boolean TOGGLE_ON_CLICK = true;

    /**
     * The flags to pass to {@link SystemUiHider#getInstance}.
     */
    private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;

    /**
     * The instance of the {@link SystemUiHider} for this activity.
     */
    private SystemUiHider mSystemUiHider;
    
    private View advancedLinear;
    private  Animation advancedShow;
    private  Animation advancedHide;
    
    private TextView gpsInformation;
    private TextView viewLocation;
    private TextView speed;
    private TextView time;
    private TextView distance;
    private TextView distanceUnit;
    private TextView altitude;
    private TextView accuracy;
    private TextView lastFix;
    
    private EditText user;
    private EditText password;
    
    private Button startButton;
    private Button resetButton;
    private Button loginButton;
    private Button newAccountButton;
    
    private LocationManager locationManager;
    private Location location;
    private Gps gps;
    
    private boolean logged = false;
    
    private Handler customHandler = new Handler();
    
    boolean advancedLinearIsHide = false;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        final Bundle finalSavedInstanceState = savedInstanceState;

        setContentView(R.layout.activity_fullscreen);

        final View controlsView = findViewById(R.id.fullscreen_content_controls);
        final View contentView = findViewById(R.id.fullscreen_content);
    	        
        
        advancedLinear = findViewById(R.id.advanced);
        viewLocation  = (TextView)findViewById(R.id.viewLocation);
        gpsInformation = (TextView)findViewById(R.id.gpsInformation);
        speed = (TextView)findViewById(R.id.speed);
        distance = (TextView)findViewById(R.id.distance);
        distanceUnit = (TextView)findViewById(R.id.distanceUnit);
        altitude = (TextView)findViewById(R.id.altitude);
        accuracy = (TextView)findViewById(R.id.accuracy);
        lastFix = (TextView)findViewById(R.id.lastFix);
        time = (TextView)findViewById(R.id.time);
        
        startButton = (Button) findViewById(R.id.startButton);
        resetButton = (Button) findViewById(R.id.resetButton);
                
        advancedHide = AnimationUtils.loadAnimation(this, R.anim.abc_slide_out_bottom);
        advancedShow = AnimationUtils.loadAnimation(this, R.anim.abc_slide_in_bottom);
        
        GpsInit();  //initialize gps
        
        if(GeoService.StaticData.timeStarted) {
        	customHandler.postDelayed(updateTimerThread, 0);
        	startButton.setText("STOP");
        }
                
        //timer
        startButton.setOnClickListener(new View.OnClickListener() {
	        public void onClick(View view) {
	        	if(GeoService.StaticData.timeStarted) {
	        		GeoService.StaticData.timeStarted = false;
	        		GeoService.StaticData.timeStoped = true;
		        	gps.savedLocation = null;
		        	//customHandler.removeCallbacks(updateTimerThread);
		        	startButton.setText("START");
		        	stopMyService();
	        	}
	        	else {
	        		if(GeoService.StaticData.timeStoped == true) {
		        		GeoService.StaticData.timeStoped = false;
	        		}
	        		else {
	        			customHandler.postDelayed(updateTimerThread, 0);
	        		}
	        		GeoService.StaticData.timeStarted = true;
		        	startButton.setText("STOP");
		        	startMyService();
	        	}
	        	
	        }
        });
        

        resetButton.setOnClickListener(new View.OnClickListener() {
	        public void onClick(View view) {
	        	GeoService.StaticData.timeStarted = false;
	        	GeoService.StaticData.timeStoped = false;
	        	customHandler.removeCallbacks(updateTimerThread);

	            gps.totalDistance = 0;
	            
	            speed.setText("0");
	            distance.setText("0");
	            time.setText("00:00:00");
	        }
        });
        
        advancedLinear.setOnClickListener(new View.OnClickListener() {
	        public void onClick(View view) {
	        	if(advancedLinearIsHide) {
	        		advancedLinear.setTop(contentView.getHeight()-320);
	        		advancedLinear.startAnimation(advancedShow);
	        		advancedLinearIsHide = false;
	        		gpsInformation.setText(gps.getGpsStatus());
	        		viewLocation.setText(gps.showLocation());
	        		accuracy.setText(gps.showAccuracy());
	            	lastFix.setText(gps.showLastFix());
	        	}
	        	else {
	        		advancedLinear.setTop(contentView.getHeight()-50);
	        		advancedLinear.startAnimation(advancedHide);
	        		advancedLinearIsHide = true;
	        	}
	        }
        });

        ///////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////

        // Set up an instance of SystemUiHider to control the system UI for
        // this activity.
        mSystemUiHider = SystemUiHider.getInstance(this, contentView, HIDER_FLAGS);
        mSystemUiHider.setup();
        mSystemUiHider
                .setOnVisibilityChangeListener(new SystemUiHider.OnVisibilityChangeListener() {
                    // Cached values.
                    int mControlsHeight;
                    int mShortAnimTime;

                    @Override
                    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
                    public void onVisibilityChange(boolean visible) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
                            // If the ViewPropertyAnimator API is available
                            // (Honeycomb MR2 and later), use it to animate the
                            // in-layout UI controls at the bottom of the
                            // screen.
                            if (mControlsHeight == 0) {
                                mControlsHeight = controlsView.getHeight();
                            }
                            if (mShortAnimTime == 0) {
                                mShortAnimTime = getResources().getInteger(
                                        android.R.integer.config_shortAnimTime);
                            }
                            controlsView.animate()
                                    .translationY(visible ? 0 : mControlsHeight)
                                    .setDuration(mShortAnimTime);
                        } else {
                            // If the ViewPropertyAnimator APIs aren't
                            // available, simply show or hide the in-layout UI
                            // controls.
                            controlsView.setVisibility(visible ? View.VISIBLE : View.GONE);
                        }

                        if (visible && AUTO_HIDE) {
                            // Schedule a hide().
                            delayedHide(AUTO_HIDE_DELAY_MILLIS);
                        }
                    }
                });

        // Set up the user interaction to manually show or hide the system UI.
        controlsView.setOnClickListener(new View.OnClickListener() {
	        public void onClick(View view) {
                if (TOGGLE_ON_CLICK) {
                    mSystemUiHider.toggle();
                } else {
                    mSystemUiHider.show();
                }
            }
        });
        
        /////////////////ADVANCED LINEAR/////////////////////////////////////////
        
        if(!logged) {
	        setContentView(R.layout.login_fullscreen);
	        
	        user = (EditText) findViewById(R.id.userValue);
	        password = (EditText) findViewById(R.id.passwordValue);
	        
	        loginButton = (Button) findViewById(R.id.loginButton);
	        newAccountButton = (Button) findViewById(R.id.newAccountButton);
	        
	        //login
	        loginButton.setOnClickListener(new View.OnClickListener() {
		        public void onClick(View view) {
		        	if(user.getText() != null && password.getText() != null) {
		        		logged = true;
		        		onCreate(finalSavedInstanceState);
		        	}
		        }
	        });
        }

        // Upon interacting with UI controls, delay any scheduled hide()
        // operations to prevent the jarring behavior of controls going away
        // while interacting with the UI.
        /*findViewById(R.id.dummy_button).setOnTouchListener(mDelayHideTouchListener);*/
    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        // Trigger the initial hide() shortly after the activity has been
        // created, to briefly hint to the user that UI controls
        // are available.
        delayedHide(0);
    }


    /**
     * Touch listener to use for in-layout UI controls to delay hiding the
     * system UI. This is to prevent the jarring behavior of controls going away
     * while interacting with activity UI.
     */
    View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            if (AUTO_HIDE) {
                delayedHide(AUTO_HIDE_DELAY_MILLIS);
            }
            return false;
        }
    };

    Handler mHideHandler = new Handler();
    Runnable mHideRunnable = new Runnable() {
        @Override
        public void run() {
            mSystemUiHider.hide();
        }
    };

    /**
     * Schedules a call to hide() in [delay] milliseconds, canceling any
     * previously scheduled calls.
     */
    private void delayedHide(int delayMillis) {
        mHideHandler.removeCallbacks(mHideRunnable);
        mHideHandler.postDelayed(mHideRunnable, delayMillis);
    }
    
    
    private LocationListener locationListener = new LocationListener() {
        @Override
        public void onStatusChanged(String arg0, int arg1, Bundle arg2) { 
            
        }
        
        @Override
        public void onProviderEnabled(String arg0) {
            
        }
        
        @Override
        public void onProviderDisabled(String arg0) {
            
        }
        
        @Override
        public void onLocationChanged(Location location) {
        	speed.setText(gps.showSpeed());
        	if(GeoService.StaticData.timeStarted) {
        		distance.setText(gps.showDistance());
        	}
        	distanceUnit.setText(gps.showDistanceUnit());
        	altitude.setText(gps.showElevation());
        	
        	gps.location = gps.locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        	        	
            if(gps.savedLocation == null)
                gps.savedLocation = gps.locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        
            new WaitingForStop().execute();
        }
    };
    
    
    
    @Override
    protected void onStart() {
        super.onStart();
        gps.locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 
                                               3000, 
                                               2, 
                                               locationListener);
    }
    
    
    @Override
    protected void onStop() {
        gps.locationManager.removeUpdates(locationListener);
        super.onStop();
    }
    
    private class WaitingForStop extends AsyncTask<Void, Void, Void> {
    	
    	private Location lastLocation;
    	
    	@Override
    	protected void onPreExecute() {
    		lastLocation = gps.location;
    	}
    	
    	@Override
    	protected Void doInBackground(Void... params) {
            try {
            	Thread.sleep(3000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		return null;
    	}
    	
    	@Override
    	protected void onPostExecute(Void result) {
    		if(lastLocation == gps.location) {
				speed.setText("0");
			}
    	}
    }
    
    
    private Runnable updateTimerThread = new Runnable() {
	    	public void run() {
		    	time.setText(GeoService.StaticData.getTime());
		    	customHandler.postDelayed(this, 0);
	    	}
    };
    
    
    private void GpsInit() {
		////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////
		//writing gps information
		locationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);      
		location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		
		gps = new Gps(locationManager, location);
		
		gpsInformation.setText(gps.getGpsStatus());
		
		viewLocation.setText(gps.showLocation());
		
		//start waiting for stop
		new WaitingForStop().execute();
    }
    
    
    private void startMyService() {
        Intent serviceIntent = new Intent(this, GeoService.class);
        startService(serviceIntent);
    }
 
    private void stopMyService() {
        Intent serviceIntent = new Intent(this, GeoService.class);
        stopService(serviceIntent);
    }
    
}


